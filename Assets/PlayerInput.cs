//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""CharacterMovement"",
            ""id"": ""85cce81c-0e36-4a5e-86cc-d5e48821ab92"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""b7bf7248-ea78-4771-8878-db009c114c51"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrow keys"",
                    ""id"": ""5b0b1e9d-7105-4308-a398-0f5c0c2ada74"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a74a0773-a273-4ee8-83f2-8dfdcb9aad11"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9ba1f6f2-3bb9-4965-a494-51ae4688b3a1"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""18ab96d4-15a6-4f13-a44d-c242fdbfe9cf"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d790e412-cf9a-4c12-8add-65dfe66dd16b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Interactions"",
            ""id"": ""3ee7415d-1729-4252-856c-00b91a1edc99"",
            ""actions"": [
                {
                    ""name"": ""Sit"",
                    ""type"": ""Button"",
                    ""id"": ""a711aca2-5ae7-4778-93f9-a8f5dd149dc9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Stand"",
                    ""type"": ""Button"",
                    ""id"": ""9f1bcd26-b762-4acc-ae30-cdc056bfc456"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Clap"",
                    ""type"": ""Button"",
                    ""id"": ""ab155757-b85b-4eb7-9890-353c26f9f9fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RaiseHand"",
                    ""type"": ""Button"",
                    ""id"": ""bb04d16a-0f90-4d1a-8a31-aa23567fb7f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""60f571c1-9ff0-4582-9e03-d4a2e710cb6d"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""068f7886-ef4c-453f-a963-609aa2d57421"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""699b00de-36d0-4aa5-8b3f-db3fda46822a"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Clap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e97b03f5-3309-461d-8c40-902a4d698eae"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RaiseHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterMovement
        m_CharacterMovement = asset.FindActionMap("CharacterMovement", throwIfNotFound: true);
        m_CharacterMovement_Movement = m_CharacterMovement.FindAction("Movement", throwIfNotFound: true);
        // Interactions
        m_Interactions = asset.FindActionMap("Interactions", throwIfNotFound: true);
        m_Interactions_Sit = m_Interactions.FindAction("Sit", throwIfNotFound: true);
        m_Interactions_Stand = m_Interactions.FindAction("Stand", throwIfNotFound: true);
        m_Interactions_Clap = m_Interactions.FindAction("Clap", throwIfNotFound: true);
        m_Interactions_RaiseHand = m_Interactions.FindAction("RaiseHand", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterMovement
    private readonly InputActionMap m_CharacterMovement;
    private ICharacterMovementActions m_CharacterMovementActionsCallbackInterface;
    private readonly InputAction m_CharacterMovement_Movement;
    public struct CharacterMovementActions
    {
        private @PlayerInput m_Wrapper;
        public CharacterMovementActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_CharacterMovement_Movement;
        public InputActionMap Get() { return m_Wrapper.m_CharacterMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterMovementActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterMovementActions instance)
        {
            if (m_Wrapper.m_CharacterMovementActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_CharacterMovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_CharacterMovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_CharacterMovementActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_CharacterMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public CharacterMovementActions @CharacterMovement => new CharacterMovementActions(this);

    // Interactions
    private readonly InputActionMap m_Interactions;
    private IInteractionsActions m_InteractionsActionsCallbackInterface;
    private readonly InputAction m_Interactions_Sit;
    private readonly InputAction m_Interactions_Stand;
    private readonly InputAction m_Interactions_Clap;
    private readonly InputAction m_Interactions_RaiseHand;
    public struct InteractionsActions
    {
        private @PlayerInput m_Wrapper;
        public InteractionsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Sit => m_Wrapper.m_Interactions_Sit;
        public InputAction @Stand => m_Wrapper.m_Interactions_Stand;
        public InputAction @Clap => m_Wrapper.m_Interactions_Clap;
        public InputAction @RaiseHand => m_Wrapper.m_Interactions_RaiseHand;
        public InputActionMap Get() { return m_Wrapper.m_Interactions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionsActions set) { return set.Get(); }
        public void SetCallbacks(IInteractionsActions instance)
        {
            if (m_Wrapper.m_InteractionsActionsCallbackInterface != null)
            {
                @Sit.started -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnSit;
                @Sit.performed -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnSit;
                @Sit.canceled -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnSit;
                @Stand.started -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnStand;
                @Stand.performed -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnStand;
                @Stand.canceled -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnStand;
                @Clap.started -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnClap;
                @Clap.performed -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnClap;
                @Clap.canceled -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnClap;
                @RaiseHand.started -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnRaiseHand;
                @RaiseHand.performed -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnRaiseHand;
                @RaiseHand.canceled -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnRaiseHand;
            }
            m_Wrapper.m_InteractionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Sit.started += instance.OnSit;
                @Sit.performed += instance.OnSit;
                @Sit.canceled += instance.OnSit;
                @Stand.started += instance.OnStand;
                @Stand.performed += instance.OnStand;
                @Stand.canceled += instance.OnStand;
                @Clap.started += instance.OnClap;
                @Clap.performed += instance.OnClap;
                @Clap.canceled += instance.OnClap;
                @RaiseHand.started += instance.OnRaiseHand;
                @RaiseHand.performed += instance.OnRaiseHand;
                @RaiseHand.canceled += instance.OnRaiseHand;
            }
        }
    }
    public InteractionsActions @Interactions => new InteractionsActions(this);
    public interface ICharacterMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IInteractionsActions
    {
        void OnSit(InputAction.CallbackContext context);
        void OnStand(InputAction.CallbackContext context);
        void OnClap(InputAction.CallbackContext context);
        void OnRaiseHand(InputAction.CallbackContext context);
    }
}
